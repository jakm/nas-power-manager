#!/usr/bin/env python

import logging
import os
import os.path
import re
import signal
import subprocess
import sys
import time
import traceback
from lockfile.pidlockfile import PIDLockFile
from setproctitle import setproctitle

PIDFILE = '/var/run/nas-power-manager.pid'

PIDLOCK = PIDLockFile(PIDFILE)


class DaemonError(Exception):
    pass


class NfsWatchingDaemon(object):
    def __init__(self, configfile):
        from ConfigParser import RawConfigParser
        parser = RawConfigParser()
        parser.read(configfile)

        self.config = parser
        self.logger = logging.getLogger(self.__class__.__name__)

    def run(self):
        signal.signal(signal.SIGTERM, self._sigterm_handler)

        setproctitle('nas-power-manager')

        self.logger.info('Daemon started')

        self.timeout = self.config.getint('nfs_watcher', 'timeout')
        self.suspend_command = self.config.get('nfs_watcher',
                                               'suspend_command')
        address = self.config.get('nfs_server', 'address')
        port = self.config.getint('nfs_server', 'port')

        self.logger.debug('NFS connections will be checked on %s:%s',
                          address, port)

        pattern = (r'^(tcp|udp)\s+0\s+0\s+({address}:{port})'
                   .format(address=address.replace('.', '\\.'), port=port))
        self.conn_exist_regex = re.compile(pattern, re.I | re.M)

        self._main_loop()

    def _sigterm_handler(self, signum, frame):
        if signum == signal.SIGTERM:
            signal.signal(signal.SIGTERM, signal.SIG_IGN)
            self.logger.info('SIGTERM received ... stopping')
            PIDLOCK.release()
            exit(0)

    def _main_loop(self):
        with PIDLOCK:
            try:
                while True:
                    self.logger.debug('Sleep for %s s', self.timeout)
                    time.sleep(self.timeout)

                    if self._does_nfs_conn_exist():
                        self.logger.debug('NFS connections exist')
                    else:
                        self.logger.debug('No NFS connection, calling suspend '
                                          'command: %s', self.suspend_command)
                        os.system(self.suspend_command)
            except Exception:
                self.logger.critical(traceback.format_exc())

        exit(1)

    def _does_nfs_conn_exist(self):
        p = subprocess.Popen(['/usr/bin/netstat', '-a', '-n'],
                             stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        status = p.wait()
        if status == 0:
            output = p.stdout.read()
            if self.conn_exist_regex.findall(output):
                return True
            else:
                return False
        else:
            raise DaemonError('netstat exited with %s status code', status)

    @staticmethod
    def get_pid():
        return PIDLOCK.read_pid()

    @staticmethod
    def is_running():
        pid = NfsWatchingDaemon.get_pid()
        if pid is None:
            return False

        try:
            os.kill(pid, 0)
        except OSError:
            return False

        return True


def parse_args():
    from optparse import OptionParser, OptionGroup

    USAGE = '%prog [options] COMMAND'
    parser = OptionParser(usage=USAGE)
    parser.set_defaults(nodaemon=False, debug=False)
    parser.add_option('', '--config-file', dest='configfile',
                      help='read configuration from FILE', metavar='FILE')
    parser.add_option('', '--log-file', dest='logfile',
                      help='write log to FILE', metavar='FILE')
    parser.add_option('', '--no-daemon', dest='nodaemon', action='store_true',
                      help="don't start application as a daemon")
    parser.add_option('', '--debug', dest='debug', action='store_true',
                      help='log debug information')

    group = OptionGroup(parser, 'COMMAND', '')
    parser.add_option_group(group)
    group = OptionGroup(parser, 'start', 'start daemon')
    parser.add_option_group(group)
    group = OptionGroup(parser, 'stop', 'stop daemon')
    parser.add_option_group(group)
    group = OptionGroup(parser, 'pause', 'pause watching')
    parser.add_option_group(group)
    group = OptionGroup(parser, 'resume', 'resume watching')
    parser.add_option_group(group)

    options, args = parser.parse_args()

    if len(args) != 1:
        parser.error('Exactly one command is allowed')

    command = args[0]

    if command not in ('start', 'stop', 'pause', 'resume'):
        parser.error('Unknown command')

    return options, command


def get_logfile_fd():
    assert len(logging.root.handlers) == 1

    handler = logging.root.handlers[0]
    fd = handler.stream.fileno()

    return fd


def run_as_daemon(app):
    import daemon

    stdout_fd = sys.stdout.fileno()
    logfile_fd = get_logfile_fd()

    fds = [stdout_fd, logfile_fd]

    with daemon.DaemonContext(files_preserve=fds):
        app.run()


def main():
    options, command = parse_args()

    logfile = options.logfile  # None = stdout
    loglevel = logging.DEBUG if options.debug else logging.INFO

    format = '[%(asctime)s] %(name)s %(levelname)s %(message)s'
    logging.basicConfig(format=format, level=loglevel, filename=logfile)

    logger = logging.getLogger('main')

    logger.debug('Called nas-power-manager: %s, %s', command, options)

    configfile = options.configfile or '/etc/nas-power-manager.ini'

    if command == 'start':
        if NfsWatchingDaemon.is_running():
            msg = 'Daemon is running'
            logger.debug(msg)
            exit(msg)

        app = NfsWatchingDaemon(configfile)

        if options.nodaemon:
            app.run()
        else:
            run_as_daemon(app)

    elif command == 'stop':
        if NfsWatchingDaemon.is_running():
            logger.debug('Sending SIGTERM to deamon')
            os.kill(NfsWatchingDaemon.get_pid(), signal.SIGTERM)
    elif command == 'pause':
        if NfsWatchingDaemon.is_running():
            logger.debug('Sending SIGSTOP to deamon')
            os.kill(NfsWatchingDaemon.get_pid(), signal.SIGSTOP)
    elif command == 'resume':
        if NfsWatchingDaemon.is_running():
            logger.debug('Sending SIGCONT to deamon')
            os.kill(NfsWatchingDaemon.get_pid(), signal.SIGCONT)
    else:
        raise NotImplementedError()

if __name__ == '__main__':
    try:
        main()
    except Exception:
        traceback.print_exc()
